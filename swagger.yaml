openapi: 3.0.0

info:
  title: Backend API
  description: API for working with the backend 
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/
    description: Develop server

paths:
  /jobs/{job_id}/run:
    post:
      tags:
        - "New Job"
      summary: Start job
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful request
  /jobs/{job_id}/disable:
    post:
      tags:
        - "New Job"
      summary: Disable job
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful request
  /jobs/{job_id}/enable:
    post:
      tags:
        - "New Job"
      summary: Enable job
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful request

  /jobs/{job_id}/delete:
    delete:
      tags:
        - "New Job"
      summary: Delete job
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful request
  /jobs/{job_id}/builds/{build_id}/logs:
    get:
      tags:
        - "New Job"
      summary: Get the build logs
      parameters:
            - name: job_id
              in: path
              required: true
              schema:
                type: integer
                format: int32
     
            - name: build_id
              in: path
              required: true
              schema:
                type: integer
                format: int32
      responses:
        '200':
          description: successful request
  
  
  
  /reservation/create:
    post:
      tags:
      - "New Reservation"
      summary: Create reservation
      requestBody:
        required: true
        content:
          application/json:
           schema:
            $ref: '#/components/schemas/ReservationInput'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
  /reservation/{res_id}/:
    get:
      tags:
      - "New Reservation"
      summary: Get info about a specific reservation
      parameters:
        - name: res_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
  
  /reservation/{res_id}/update:
    post:
      tags:
      - "New Reservation"
      summary: Update info about a specific reservation
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
           schema:
            $ref: '#/components/schemas/ReservationInput'
      responses:
        '201':
          description: Updated
        '400':
          description: Bad Request
  
  /reservation/{res_id}/delete:
    delete:
      tags:
      - "New Reservation"
      summary: Update info about a specific reservation
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '201':
          description: Deleted
        '400':
          description: Bad Request
  
  
  
  /views:
    get:
      tags:
        - "Views"
      summary: Get info about all view
      parameters:
        - in: query
          name: start
          schema:
            type: integer
            format: int32
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful request


  /views/{view_id}:
    get:
      parameters:
        - name: view_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      tags:
          - "Views"
      summary: Get information about a specific view
      responses:
        '200':
          description: successful request
    

  /jobs:
    get:
      parameters:
        - in: query
          name: start
          schema:
            type: integer
            format: int32
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
      tags:
            - "Job"
      summary: Get info about all jobs
      responses:
        '200':
          description: successful request
    

  /jobs/{job_id}:
    get:
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: integer
            format: int32

      tags:
            - "Job"
      summary: Get information about a specific job
      responses:
        '200':
          description: successful request
    

  /jobs/{job_id}/builds:
    get:
      parameters:
          - name: job_id
            in: path
            required: true
            schema:
              type: integer
              format: int32
      tags:
            - "Job"
      summary: Get information about all builds of the job
      responses:
        '200':
          description: successful request
   

  /jobs/{job_id}/builds/{build_id}:
    get:
      parameters:
            - name: job_id
              in: path
              required: true
              schema:
                type: integer
                format: int32
     
            - name: build_id
              in: path
              required: true
              schema:
                type: integer
                format: int32
      tags:
            - "Job"
      summary: Get information about a specific build
      responses:
        '200':
          description: successful request
  /trigger-data-fetch:
    get:
      tags:
        - "Fetch Data"
      summary: Fetch data from Jenkins
      responses:
        '200':
          description: successful request

components:
  schemas:
    ReservationInput:
      type: object
      properties:
        name:
          type: string
        dateStart:
          type: string
          format: date
        dateEnd:
          type: string
          format: date
        timeStart:
          type: string
          format: time
        timeEnd:
          type: string
          format: time-offset
